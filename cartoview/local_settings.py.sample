# -*- coding: utf-8 -*-
#########################################################################
#
# Copyright (C) 2016 OSGeo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#########################################################################

import os
from .settings import (MAP_BASELAYERS, INSTALLED_APPS, OGC_SERVER, TEMPLATES,
                       CARTOVIEW_TEMPLATE_DIRS, APPS_DIR)
SITEURL = "http://localhost/"
ALLOWED_HOSTS = ['*']
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'cartoview',
        'USER': 'xxxx',
        'PASSWORD': 'xxxxx',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    # vector datastore for uploads
    'datastore': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        # 'ENGINE': '', # Empty ENGINE name disables
        'NAME': 'cartoview_datastore',
        'USER': 'xxxxxx',
        'PASSWORD': 'xxxxx',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
GEOSERVER_LOCATION = os.getenv('GEOSERVER_LOCATION',
                               'http://localhost:8080/geoserver/')

GEOSERVER_PUBLIC_LOCATION = os.getenv(
    #    'GEOSERVER_PUBLIC_LOCATION', '{}/geoserver/'.format(SITEURL)
    'GEOSERVER_LOCATION',
    'http://localhost/geoserver/')

# OGC_SERVER_DEFAULT_USER = os.getenv('GEOSERVER_ADMIN_USER', 'admin')

# OGC_SERVER_DEFAULT_PASSWORD = os.getenv('GEOSERVER_ADMIN_PASSWORD',
#                                         'geoserver')
# OGC_SERVER = {
#     'default': {
#         'BACKEND':
#         'geonode.geoserver',
#         'LOCATION':
#         GEOSERVER_LOCATION,
#         'LOGIN_ENDPOINT':
#         'j_spring_oauth2_geonode_login',
#         'LOGOUT_ENDPOINT':
#         'j_spring_oauth2_geonode_logout',
#         # PUBLIC_LOCATION needs to be kept like this because in dev mode
#         # the proxy won't work and the integration tests will fail
#         # the entire block has to be overridden in the local_settings
#         'PUBLIC_LOCATION':
#         GEOSERVER_PUBLIC_LOCATION,
#         'USER':
#         OGC_SERVER_DEFAULT_USER,
#         'PASSWORD':
#         OGC_SERVER_DEFAULT_PASSWORD,
#         'MAPFISH_PRINT_ENABLED':
#         True,
#         'PRINT_NG_ENABLED':
#         True,
#         'GEONODE_SECURITY_ENABLED':
#         True,
#         'GEOFENCE_SECURITY_ENABLED':
#         GEOFENCE_SECURITY_ENABLED,
#         'GEOGIG_ENABLED':
#         False,
#         'WMST_ENABLED':
#         False,
#         'BACKEND_WRITE_ENABLED':
#         True,
#         'WPS_ENABLED':
#         False,
#         'LOG_FILE':
#         '%s/geoserver/data/logs/geoserver.log' % os.path.abspath(
#             os.path.join(PROJECT_ROOT, os.pardir)),
#         # Set to name of database in DATABASES dictionary to enable
#         'DATASTORE':
#         os.getenv('DEFAULT_BACKEND_DATASTORE', 'datastore'),
#         'PG_GEOGIG':
#         False,
#         'TIMEOUT':
#         10  # number of seconds to allow for HTTP requests
#     }
# }

# GeoNode javascript client configuration

# default map projection
# Note: If set to EPSG:4326, then only EPSG:4326 basemaps will work.
DEFAULT_MAP_CRS = "EPSG:900913"

# Where should newly created maps be focused?
DEFAULT_MAP_CENTER = (0, 0)

# How tightly zoomed should newly created maps be?
# 0 = entire world;
# maximum zoom is between 12 and 15 (for Google Maps, coverage varies by area)
DEFAULT_MAP_ZOOM = 0

#BASE MAPS
ALT_OSM_BASEMAPS = os.environ.get('ALT_OSM_BASEMAPS', True)
CARTODB_BASEMAPS = os.environ.get('CARTODB_BASEMAPS', True)
STAMEN_BASEMAPS = os.environ.get('STAMEN_BASEMAPS', True)
THUNDERFOREST_BASEMAPS = os.environ.get('THUNDERFOREST_BASEMAPS', True)
MAPBOX_ACCESS_TOKEN = os.environ.get(
    'MAPBOX_ACCESS_TOKEN',
    'pk.eyJ1IjoiaGlzaGFta2FyYW0iLCJhIjoiY2l4dDM5NGU0MDAweDJwbnZma2tvdTExbyJ9.Nyx3DZ15RhW_tl5sPCnpdQ'
)
BING_API_KEY = os.environ.get('BING_API_KEY', '<BING_API_KEY>')
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY', '<GOOGLE_API_KEY>')
MAPBOX_API = {
    'styles': {
        'streets-v9': {
            'enabled': True,
            'name': 'Mapbox Streetmap',
            'attribution': '   Mapbox    OpenStreetMap',
            'visibility': False,
        },
        'outdoors-v9': {
            'enabled': True,
            'name': 'Mapbox Outdoors',
            'attribution': '   Mapbox    OpenStreetMap',
            'visibility': False,
        },
        'dark-v9': {
            'enabled': True,
            'name': 'Mapbox Dark',
            'attribution': '   Mapbox    OpenStreetMap',
            'visibility': False,
        },
        'light-v9': {
            'enabled': True,
            'name': 'Mapbox Light',
            'attribution': '   Mapbox    OpenStreetMap',
            'visibility': False,
        },
        'satellite-v9': {
            'enabled': True,
            'name': 'Mapbox Satellite',
            'attribution': '   Mapbox    DigitalGlobe',
            'visibility': False,
        },
        'satellite-streets-v9': {
            'enabled': True,
            'name': 'Mapbox Satellite Streets',
            'attribution': '   Mapbox    OpenStreetMap    DigitalGlobe',
            'visibility': False,
        },
    }
}

MAP_BASELAYERS = [
    {
        "source": {
            "ptype": "gxp_olsource"
        },
        "type": "OpenLayers.Layer",
        "args": ["No background"],
        "name": "background",
        "visibility": False,
        "fixed": True,
        "group": "background"
    },
    # {
    #     "source": {"ptype": "gxp_olsource"},
    #     "type": "OpenLayers.Layer.XYZ",
    #     "title": "TEST TILE",
    #     "args": ["TEST_TILE", "http://test_tiles/tiles/${z}/${x}/${y}.png"],
    #     "name": "background",
    #     "attribution": "&copy; TEST TILE",
    #     "visibility": False,
    #     "fixed": True,
    #     "group":"background"
    # },
    {
        "source": {
            "ptype": "gxp_osmsource"
        },
        "type": "OpenLayers.Layer.OSM",
        "name": "mapnik",
        "visibility": True,
        "fixed": True,
        "group": "background"
    }
]
for k, v in MAPBOX_API['styles'].items():
    URL = ('https://api.mapbox.com/styles/v1/mapbox/%s/tiles/256/${z}/${x}/'
           '${y}?access_token=%s') % (k, MAPBOX_ACCESS_TOKEN)
    if v['enabled']:
        BASEMAP = {
            'source': {
                'ptype': 'gxp_olsource'
            },
            'type':
            'OpenLayers.Layer.XYZ',
            "args": [
                '%s' % v['name'], [URL],
                {
                    'transitionEffect': 'resize',
                    'attribution': '%s' % v['attribution']
                }
            ],
            'fixed':
            True,
            'visibility':
            v['visibility'],
            'group':
            'background'
        }
        MAP_BASELAYERS.append(BASEMAP)
if 'geonode.geoserver' in INSTALLED_APPS:
    LOCAL_GEOSERVER = {
        "source": {
            "ptype": "gxp_wmscsource",
            "url": OGC_SERVER['default']['PUBLIC_LOCATION'] + "wms",
            "restUrl": "/gs/rest"
        }
    }
    baselayers = MAP_BASELAYERS
    MAP_BASELAYERS = [LOCAL_GEOSERVER]
    MAP_BASELAYERS.extend(baselayers)

OSM = {
    'maps': {
        'de': {
            'enabled':
            True,
            'name':
            'OSM DE',
            'visibility':
            False,
            'url': ('http://a.tile.openstreetmap.de/tiles/osmde/${z}/${x}/${y}'
                    '.png'),
            'attribution': ('&copy; <a href="http://www.openstreetmap.org/copy'
                            'right">OpenStreetMap</a>')
        },
        'france': {
            'enabled':
            True,
            'name':
            'OSM France',
            'visibility':
            False,
            'url': ('http://a.tile.openstreetmap.fr/osmfr/${z}/${x}/${y}.png'),
            'attribution': ('&copy; Openstreetmap France | &copy; <a href="htt'
                            'p://www.openstreetmap.org/copyright">OpenStreetMa'
                            'p</a>')
        },
        'hot': {
            'enabled':
            True,
            'name':
            'OSM HOT',
            'visibility':
            False,
            'url': ('http://a.tile.openstreetmap.fr/hot/${z}/${x}/${y}.png'),
            'attribution': ('&copy; <a href="http://www.openstreetmap.org/copy'
                            'right">OpenStreetMap</a>, Tiles courtesy of <a hr'
                            'ef="http://hot.openstreetmap.org/" target="_blank'
                            '">Humanitarian OpenStreetMap Team</a>')
        }
    }
}

for k, v in OSM['maps'].items():
    if v['enabled']:
        BASEMAP = {
            'source': {
                'ptype': 'gxp_olsource'
            },
            'type':
            'OpenLayers.Layer.XYZ',
            "args": [
                '%s' % v['name'], [v['url']],
                {
                    'transitionEffect': 'resize',
                    'attribution': '%s' % v['attribution'],
                }
            ],
            'fixed':
            True,
            'visibility':
            v['visibility'],
            'group':
            'background'
        }
        MAP_BASELAYERS.append(BASEMAP)
STAMEN = {
    'maps': {
        'toner': {
            'enabled': True,
            'name': 'Stamen Toner',
            'visibility': False,
        },
        'toner-lite': {
            'enabled': True,
            'name': 'Stamen Toner Lite',
            'visibility': False,
        },
        'watercolor': {
            'enabled': True,
            'name': 'Stamen Watercolor',
            'visibility': False,
        }
    }
}
ATTRIBUTION = ('Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a'
               ' href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</'
               'a> &mdash; Map data &copy; <a href="http://www.openstreetmap.o'
               'rg/copyright">OpenStreetMap</a>')
for k, v in STAMEN['maps'].items():
    URL = 'http://stamen-tiles-a.a.ssl.fastly.net/%s/${z}/${x}/${y}.png' % k
    if v['enabled']:
        BASEMAP = {
            'source': {
                'ptype': 'gxp_olsource'
            },
            'type':
            'OpenLayers.Layer.XYZ',
            "args": [
                '%s' % v['name'], [URL],
                {
                    'transitionEffect': 'resize',
                    'attribution': '%s' % ATTRIBUTION,
                }
            ],
            'fixed':
            True,
            'visibility':
            v['visibility'],
            'group':
            'background'
        }
        MAP_BASELAYERS.append(BASEMAP)
DEFAULT_FROM_EMAIL = 'cartoview@cartologic.com'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'cartoview@cartologic.com'
EMAIL_HOST_PASSWORD = 'clogic0706'
TEMPLATES[0]["DIRS"] = CARTOVIEW_TEMPLATE_DIRS + TEMPLATES[0]["DIRS"]
from cartoview import app_manager
from past.builtins import execfile
app_manager_settings = os.path.join(
    os.path.dirname(app_manager.__file__), "settings.py")
execfile(os.path.realpath(app_manager_settings))
load_apps(APPS_DIR)
INSTALLED_APPS += CARTOVIEW_APPS
for settings_file in APPS_SETTINGS:
    try:
        execfile(settings_file)
    except Exception as e:
        print(e.message)